package trud.io.kjar;
import com.sbnz.trud.io.event.FetalHeartRateEvent;
import com.sbnz.trud.io.event.AverageBPMEvent;
import com.sbnz.trud.io.event.MaxBPMEvent;
import com.sbnz.trud.io.event.VariabilityEvent;
import com.sbnz.trud.io.event.CTGEnded;
import com.sbnz.trud.io.event.AccelerationEvent;
import com.sbnz.trud.io.event.ContrationValueEvent;
import com.sbnz.trud.io.event.PossibleUterineContractionEvent;
import com.sbnz.trud.io.event.UterineContractionEvent;
import com.sbnz.trud.io.model.CTG;
import com.sbnz.trud.io.model.CTGStatus;
import com.sbnz.trud.io.model.Notification;
import com.sbnz.trud.io.utils.SecondsCalculator;
import com.sbnz.trud.io.utils.VariabiltyCalculator;
import com.sbnz.trud.io.service.contracts.INotificationService;
import java.time.LocalDateTime;
import java.time.LocalDate;
import java.util.Date;
import java.lang.Math;
import java.lang.*;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.time.Period;
import java.util.Collections;
import java.util.ArrayList;
import java.time.*;  

import accumulate main.java.trud.io.kjar.accumulator.EarliestFHRAccumulator earliestFHRAccumulator;

global com.sbnz.trud.io.service.contracts.INotificationService notificationService;

declare ContractionsCounter
	counter: int
end


rule "Contractions Counter rule"
	lock-on-active
	salience 100
	agenda-group "ctgMonitoring"
	when
		not (ContractionsCounter())
	then
		insert(new ContractionsCounter(0));
end

// Average FHR rules
rule "Agregate 1min"
	agenda-group "ctgMonitoring"
	salience 100
	when
    	accumulate(
    		FetalHeartRateEvent(
    			processed == false, 
    			$timestamp: timestamp
    			), 
    		$min: earliestFHRAccumulator($timestamp)
    	)
    	$currFetal : FetalHeartRateEvent(processed == false)
    	eval(SecondsCalculator.calculateSeconds($currFetal.getTimestamp(), $min) > 60)
    	accumulate(
    		FetalHeartRateEvent(
    			processed == false, 
    			$value: value, 
    			$this: this, 
    			this != $currFetal
    			) 
    			over window:time(1m10s), 
    			$avg: average($value), 
    			$count: count($value),
    			$fetals: collectList($this)
    	)
	then
		ArrayList<FetalHeartRateEvent> events = new ArrayList<FetalHeartRateEvent>($fetals);
    	double variabilityValue = VariabiltyCalculator.calculateVariability(events);
    
    	VariabilityEvent variability = new VariabilityEvent(variabilityValue);
    	insert(variability);
    	
    	for(Object fetal : $fetals) {
      		modify((FetalHeartRateEvent)fetal) { setProcessed(true) };
    	}
    	
    	AverageBPMEvent avgBPM = new AverageBPMEvent($avg);
    	insert(avgBPM);
end

rule "CTG ending"
	agenda-group "ctgMonitoring"
	salience 100
	when
    	CTGEnded(ended == true)
    	accumulate(
    		FetalHeartRateEvent(
    			processed == false, 
    			$timestamp: timestamp
    			), 
    		$min: earliestFHRAccumulator($timestamp)
    	)
    	$currFetal : FetalHeartRateEvent(processed == false)
    	eval(SecondsCalculator.calculateSeconds($currFetal.getTimestamp(), $min) > 60)
    	accumulate(
    		FetalHeartRateEvent(
    			processed == false, 
    			$value: value, 
    			$this: this, 
    			this != $currFetal
    			) 
    			over window:time(1m10s), 
    			$avg: average($value), 
    			$count: count($value),
    			$fetals: collectList($this)
    	)
	then
		ArrayList<FetalHeartRateEvent> events = new ArrayList<FetalHeartRateEvent>($fetals);
    	double variabilityValue = VariabiltyCalculator.calculateVariability(events);
    
    	VariabilityEvent variability = new VariabilityEvent(variabilityValue);
    	insert(variability);
    	
    	for(Object fetal : $fetals) {
      		modify((FetalHeartRateEvent)fetal) { setProcessed(true) };
    	}
    	
    	AverageBPMEvent avgBPM = new AverageBPMEvent($avg);
    	insert(avgBPM);
end

rule "Fetal tachycardia - FHR non reassuring 160 < fhr < 181"
	agenda-group "ctgMonitoring"
	when
		$avgBPM: AverageBPMEvent( value > 160, value < 181)
		$ctg: CTG(tachycardia == false, fhrStatus == CTGStatus.REASSURING )
	then
		System.out.println("====================================");
		System.out.println("Fetalna tahikardija 160 < bmp < 181");
		System.out.println("====================================");
		notificationService.sendNotification(new Notification("doctorSocket", "Fetalna tahikardija", "160 < bmp < 181"));
		modify($ctg) {
			setTachycardia(true),
			setFhrStatus(CTGStatus.NON_REASSURING)
		}
end

rule "Fetal tachycardia - FHR non reassuring 100 < fhr < 109"
	agenda-group "ctgMonitoring"
	when
		$avgBPM: AverageBPMEvent( value > 99, value < 110)
		$ctg: CTG(tachycardia == false, fhrStatus == CTGStatus.REASSURING )
	then
			System.out.println("=====================================");
			System.out.println("Fetalna tahikardija 100 < bmp < 109");
			System.out.println("=====================================");
			notificationService.sendNotification(new Notification("doctorSocket", "Fetalna tahikardija","100 < bmp < 109"));
		modify($ctg) {
			setTachycardia(true),
			setFhrStatus(CTGStatus.NON_REASSURING)
		}
end

rule "Fetal tachycardia - FHR abnormal, fhrStatus was NON_REASSURING"
	agenda-group "ctgMonitoring"
	when
		$avgBPM: AverageBPMEvent( value > 180)
		$ctg: CTG(tachycardia == false, fhrStatus != CTGStatus.ABNORMAL)
	then
		System.out.println("===============================");
		System.out.println("Fetalna tahikardija bmp > 180");
		System.out.println("===============================");
		notificationService.sendNotification(new Notification("doctorSocket", "Fetalna tahikardija","bpm > 180"));
		modify($ctg) {
			setTachycardia(true),
			setFhrStatus(CTGStatus.ABNORMAL)
		}
end 

rule "Fetal bradycardia - FHR abnormal"
	agenda-group "ctgMonitoring"
	when
		$avgBPM: AverageBPMEvent( value < 100 )
		$ctg: CTG(bradycardia == false, fhrStatus != CTGStatus.ABNORMAL)
	then
		System.out.println("==================================");
		System.out.println("Fetalna bradikardija bmp < 100");
		System.out.println("==================================");
		notificationService.sendNotification(new Notification("doctorSocket", "Fetalna bradikardija", " BPM < 100"));
		modify($ctg) {
			setBradycardia(true),
			setFhrStatus(CTGStatus.ABNORMAL)
		}
end

rule "AverageBPM <= 80 for more than 3min"
	agenda-group "ctgMonitoring"
	when
		$aBPM: AverageBPMEvent( value < 81)
		AverageBPMEvent(
			this != $aBPM,
			value < 81,
			this before[ 1m, 1m20s ] $aBPM 
		)
	then
		System.out.println("=========================================");
		System.out.println("*** ALARM ***");
		System.out.println("Treba obavijestiti doktora - bpm < 80");
		System.out.println("=========================================");
		
		notificationService.sendNotification(new Notification("doctorSocket", "ALARM" , "BPM < 80 3 minuta"));
end

rule "AverageBPM <= 80 for more than 9min"
	agenda-group "ctgMonitoring"
	when
		$aBPM: AverageBPMEvent( value < 81)
		AverageBPMEvent(
			this != $aBPM,
			value < 81,
			this before[ 2m, 2m30s ] $aBPM 
		)
	then
		System.out.println("===========================");
		System.out.println("*** ALARM ***");
		System.out.println("Porod - bpm < 80");
		System.out.println("===========================");
		notificationService.sendNotification(new Notification("doctorSocket", "ALARM - vrijeme za porod" ,"BPM < 80 9 minuta"));
end

//Variability rules
rule "VariabilityEvent <= 5 for 30-50min"
	agenda-group "ctgMonitoring"
	when
		$curVariabilty: VariabilityEvent( value <= 5)
		VariabilityEvent(
			this != $curVariabilty,
			value <= 5,
			this before[ 1m10s, 3m ] $curVariabilty 
		)
		$ctg: CTG( variabiltyStatus == CTGStatus.REASSURING )
	then
		System.out.println("Varijabilnost < 5 vise od 30 minuta, stanje je sumnjivo");
		notificationService.sendNotification(new Notification("doctorSocket", "Varijabilnost sumnjiva", "Varijabilnost < 5 vise od 30 minuta"));
		
		modify($ctg) {
			setVariabiltyStatus(CTGStatus.NON_REASSURING)
		};
end

rule "VariabilityEvent <= 5 for more than50min"
	agenda-group "ctgMonitoring"
	when
		$curVariabilty: VariabilityEvent( value <= 5)
		VariabilityEvent(
			this != $curVariabilty,
			value <= 5,
			this before[ 3m, 6m ] $curVariabilty 
		)
		
		$ctg: CTG( variabiltyStatus == CTGStatus.NON_REASSURING )
	then
		System.out.println("Varijabilnost < 5 vise od 50 minuta, stanje je abnormalno");
		notificationService.sendNotification(new Notification("doctorSocket", "Varijabilnost abnormalna", "Varijabilnost < 5 vise od 50 minuta"));
		
		modify($ctg) {
			setVariabiltyStatus(CTGStatus.ABNORMAL)
		};
end

rule "VariabilityEvent >= 25 for 15-25min"
	agenda-group "ctgMonitoring"
	when
		$curVariabilty: VariabilityEvent( value >= 25)
		VariabilityEvent(
			this != $curVariabilty,
			value >= 25,
			this before[ 1m, 2m ] $curVariabilty 
		)
		
		$ctg: CTG( variabiltyStatus == CTGStatus.REASSURING )
	then
		System.out.println("Varijabilnost >= 25 vise od 15 minuta, stanje je sumnjivo");
		notificationService.sendNotification(new Notification("doctorSocket", "Varijabilnost sumnjiva", "Varijabilnost >= 25 vise od 15 minuta"));
		
		modify($ctg) {
			setVariabiltyStatus(CTGStatus.NON_REASSURING)
		};
end

rule "VariabilityEvent >= 25 for more than 25min"
	agenda-group "ctgMonitoring"
	when
		$curVariabilty: VariabilityEvent( value >= 25)
		VariabilityEvent(
			this != $curVariabilty,
			value >= 25,
			this before[ 2m, 4m ] $curVariabilty 
		)
		
		$ctg: CTG( variabiltyStatus == CTGStatus.NON_REASSURING )
	then
		System.out.println("Varijabilnost > 25 vise od 25 minuta, stanje je abnormalno");
		notificationService.sendNotification(new Notification("doctorSocket", "Varijabilnost abnormalna" , "Varijabilnost > 25 vise od 25 minuta"));

		modify($ctg) {
			setVariabiltyStatus(CTGStatus.ABNORMAL)
		};
end 

rule "Find contraction - rise"
	agenda-group "ctgMonitoring"
	when 
		$currContraction : ContrationValueEvent(processed == false, $maxCon: value)
		$cC: ContractionsCounter()
		accumulate(
    		ContrationValueEvent(
    			this != $currContraction,
    			processed == false, 
    			$value: value, 
    			$timestamp: timestamp,
    			$this: this, 
    			this after [15s, 40s] $currContraction
    			)
    			over window:length(3), 
    			$minCon: min($value),
    			$contractions: collectList($this)
    	)
	eval($maxCon - $minCon > 10 )
	
	then 
		UterineContractionEvent uce = new UterineContractionEvent($currContraction.getTimestamp());
		insert(uce);
		
		int nmbOfContraction = $cC.getCounter() + 1;
		
		modify($cC) {
			setCounter(nmbOfContraction);
		}
		System.out.println("Kontrakcija se desila");
		modify($currContraction) { setProcessed(true) };
		
		for(Object contraction : $contractions) {
      		modify((ContrationValueEvent)contraction) { setProcessed(true) };
    	}
end

rule "Count contractions in 10min 3-5"
	agenda-group "ctgMonitoring"
	when
		$utc: UterineContractionEvent(processed == false)
		
		accumulate(
			UterineContractionEvent(
				this != $utc,
				processed == false,
				$this: this
			)
			over window:time(5m),
			$count: count($this),
			$contractions: collectList($this);
			$count > 1
		)
	then
		System.out.println("===========================");
		System.out.println("*** ALARM ***");
		System.out.println("Porod krenuo");
		System.out.println("===========================");
		
		notificationService.sendNotification(new Notification("doctorSocket", "Prva faza poroda","3-5 kontrakcija u 10 minuta"));
		
		modify($utc) { setProcessed(true) };
		
		for(Object contraction : $contractions) {
      		modify((UterineContractionEvent)contraction) { setProcessed(true) };
    	}
end
//CTG result rules
rule "CTG Non-Reassuring - FHR status is Non-Reassuring"
	agenda-group "ctgMonitoring"
	when
		$ctg: CTG( variabiltyStatus == CTGStatus.REASSURING, fhrStatus == CTGStatus.NON_REASSURING, result == CTGStatus.REASSURING )
	then
		modify($ctg) {
			setResult(CTGStatus.NON_REASSURING)
		};
end

rule "CTG Non-Reassuring - Variabilty status is Non-Reassuring"
	agenda-group "ctgMonitoring"
	when
		$ctg: CTG( variabiltyStatus == CTGStatus.NON_REASSURING, fhrStatus == CTGStatus.REASSURING, result == CTGStatus.REASSURING )
	then
		modify($ctg) {
			setResult(CTGStatus.NON_REASSURING)
		};
end

rule "CTG Abnormal - FHR status and Variability status are Non-Reassuring"
	agenda-group "ctgMonitoring"
	when
		$ctg: CTG( variabiltyStatus == CTGStatus.NON_REASSURING, fhrStatus == CTGStatus.NON_REASSURING, result == CTGStatus.REASSURING )
	then
		modify($ctg) {
			setResult(CTGStatus.ABNORMAL)
		};
end

rule "CTG Abnormal - FHR status is Abnormal"
	agenda-group "ctgMonitoring"
	when
		$ctg: CTG( fhrStatus == CTGStatus.ABNORMAL, result != CTGStatus.ABNORMAL )
	then
		modify($ctg) {
			setResult(CTGStatus.ABNORMAL)
		};
end

rule "CTG Abnormal - Variability status is Abnormal"
	agenda-group "ctgMonitoring"
	when
		$ctg: CTG( variabiltyStatus == CTGStatus.ABNORMAL, result != CTGStatus.ABNORMAL )
	then
		modify($ctg) {
			setResult(CTGStatus.ABNORMAL)
		};
end

rule "Calculate FHR and Variability"
	agenda-group "ctgMonitoring"
	no-loop
	salience -100
	when
		$ctgEnded: CTGEnded( ended == true)
		$cC: ContractionsCounter()
		$ctg: CTG()
		accumulate(
			AverageBPMEvent(
				$valueFetal: value
			),
			$avgFetal: average($valueFetal)
		)
		
		accumulate(
			VariabilityEvent(
				$valueV: value
			),
			$avgV: average($valueV)
		)
	then
		modify($ctgEnded) {
			setEnded(false)
		};
		modify($ctg) {
			setFetalHartRate($avgFetal),
			setVaribilty($avgV),
			setContractions($cC.getCounter())
		};
end