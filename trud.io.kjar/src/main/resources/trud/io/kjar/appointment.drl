package trud.io.kjar;
import com.sbnz.trud.io.model.Pregnancy;
import com.sbnz.trud.io.model.Appointment;
import java.time.LocalDateTime;
import java.time.LocalDate;
import java.lang.Math;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.time.Period;
import java.util.Collections;
import java.util.ArrayList;

global Integer countScheduledDaysForTwoWeeks;
global Integer countScheduledDaysForFourWeeks;
global Integer countScheduledDaysForWeek;


rule "Is day for 4 weeks scheduled"
	salience 100
	agenda-group "appointments"
	when
		$appointments: List() from collect(Appointment())
		Number(intValue == 8) from accumulate(
			Appointment(date != null, date.toLocalDate() == LocalDate.now().plus(4, ChronoUnit.WEEKS).plus(countScheduledDaysForFourWeeks, ChronoUnit.DAYS))
			from $appointments,
			init(int count = 0;),
			action(count += 1;),
			reverse(count -= 1;),
			result(count)
			)
	then
		drools.getKnowledgeRuntime().setGlobal("countScheduledDaysForFourWeeks", Integer.valueOf(countScheduledDaysForFourWeeks + 1));
		System.out.println(countScheduledDaysForFourWeeks);
end

rule "Is day for 2 weeks scheduled"
	salience 100
	agenda-group "appointments"
	when
		$appointments: List() from collect(Appointment())
		Number(intValue == 8) from accumulate(
			Appointment(date != null, date.toLocalDate() == LocalDate.now().plus(2, ChronoUnit.WEEKS).plus(countScheduledDaysForTwoWeeks, ChronoUnit.DAYS))
			from $appointments,
			init(int count = 0;),
			action(count += 1;),
			reverse(count -= 1;),
			result(count)
			)
	then
		drools.getKnowledgeRuntime().setGlobal("countScheduledDaysForTwoWeeks", Integer.valueOf(countScheduledDaysForTwoWeeks + 1));
		System.out.println(countScheduledDaysForTwoWeeks);
end


rule "Is day for 1 week scheduled"
	salience 100
	agenda-group "appointments"
	when
		$appointments: List() from collect(Appointment())
		Number(intValue == 8) from accumulate(
			Appointment(date != null, date.toLocalDate() == LocalDate.now().plus(1, ChronoUnit.WEEKS).plus(countScheduledDaysForWeek, ChronoUnit.DAYS))
			from $appointments,
			init(int count = 0;),
			action(count += 1;),
			reverse(count -= 1;),
			result(count)
			)
	then
		drools.getKnowledgeRuntime().setGlobal("countScheduledDaysForWeek", Integer.valueOf(countScheduledDaysForWeek + 1));
		System.out.println(countScheduledDaysForWeek);
end

rule "Making an appointment - week of pregnancy < 28"
	salience 90
	agenda-group "appointments"
    when
        $pregnancy: Pregnancy(Math.abs(Period.between(LocalDate.now(), startDate).getDays()) < 28*7)
        $appointment: Appointment(date == null)
      	$listOfDates: List() from accumulate(Appointment(date != null, date.toLocalDate() == LocalDate.now().plusWeeks(4).plusDays(countScheduledDaysForTwoWeeks), $value: date); 
      								collectList($value))
    then
    	System.out.println("HAAJAJA");
    	List<LocalDateTime> modifiableList = new ArrayList<LocalDateTime>($listOfDates);
    	Collections.sort(modifiableList);
    	LocalDateTime lastAppointmentTime = $listOfDates.size() > 0 ? (LocalDateTime) $listOfDates.get(0) : LocalDate.now().plusWeeks(4).plusDays(countScheduledDaysForTwoWeeks).atTime(7, 15);
        modify($appointment) {
        	setDate(lastAppointmentTime.plusMinutes(45)),
        	setPregnancy($pregnancy),
        	setPatient($pregnancy.getPatient())
        };
end


rule "Making an appointment - week of pregnancy > 28 and week of pregnancy < 36"
	salience 90
	agenda-group "appointments"
    when
        $pregnancy: Pregnancy(Math.abs(Period.between(LocalDate.now(), startDate).getDays()) > 28*7, 
        						Math.abs(Period.between(LocalDate.now(), startDate).getDays()) < 36*7)
        $appointment: Appointment(date == null)
      	$listOfDates: List() from accumulate(Appointment(date != null, date.toLocalDate() == LocalDate.now().plusWeeks(2).plusDays(countScheduledDaysForTwoWeeks), $value: date); 
      								collectList($value))
    then
    	List<LocalDateTime> modifiableList = new ArrayList<LocalDateTime>($listOfDates);
    	Collections.sort(modifiableList);
    	LocalDateTime lastAppointmentTime = $listOfDates.size() > 0 ? (LocalDateTime) $listOfDates.get($listOfDates.size()-1) : LocalDate.now().plusWeeks(2).plusDays(countScheduledDaysForTwoWeeks).atTime(7, 15);
        modify($appointment) {
        	setDate(lastAppointmentTime.plusMinutes(45)),
        	setPregnancy($pregnancy),
        	setPatient($pregnancy.getPatient())
        };
end

rule "Making an appointment - week of pregnancy > 36"
	salience 90
	agenda-group "appointments"
    when
        $pregnancy: Pregnancy(Math.abs(Period.between(LocalDate.now(), startDate).getDays()) > 36*7)
        $appointment: Appointment(date == null)
      	$listOfDates: List() from accumulate(Appointment(date != null, date.toLocalDate() == LocalDate.now().plusWeeks(1).plusDays(countScheduledDaysForTwoWeeks), $value: date); 
      								collectList($value))
    then
    	List<LocalDateTime> modifiableList = new ArrayList<LocalDateTime>($listOfDates);
    	Collections.sort(modifiableList);
    	LocalDateTime lastAppointmentTime = $listOfDates.size() > 0 ? (LocalDateTime) $listOfDates.get($listOfDates.size()-1) : LocalDate.now().plusWeeks(1).plusDays(countScheduledDaysForTwoWeeks).atTime(7, 15);
        modify($appointment) {
        	setDate(lastAppointmentTime.plusMinutes(45)),
        	setPregnancy($pregnancy),
        	setPatient($pregnancy.getPatient())
        };
end